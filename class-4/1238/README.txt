[1238] 파티 (https://www.acmicpc.net/problem/1238)

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초		128 MB		15757	7332	4818		44.877%

문제
----
N개의 숫자로 구분된 각각의 마을에 한 명의 학생이 살고 있다.

어느 날 이 N명의 학생이 X (1 ≤ X ≤ N)번 마을에 모여서 파티를 벌이기로 했다. 이 마을 사이에는 총 M개의 단방향 도로들이 있고 i번째 길을 지나는데 Ti(1 ≤ Ti ≤ 100)의 시간을 소비한다.

각각의 학생들은 파티에 참석하기 위해 걸어가서 다시 그들의 마을로 돌아와야 한다. 하지만 이 학생들은 워낙 게을러서 최단 시간에 오고 가기를 원한다.

이 도로들은 단방향이기 때문에 아마 그들이 오고 가는 길이 다를지도 모른다. N명의 학생들 중 오고 가는데 가장 많은 시간을 소비하는 학생은 누구일지 구하여라.

입력
----
첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 10,000), X가 공백으로 구분되어 입력된다. 두 번째 줄부터 M+1번째 줄까지 i번째 도로의 시작점, 끝점, 그리고 이 도로를 지나는데 필요한 소요시간 Ti가 들어온다. 시작점과 끝점이 같은 도로는 없으며, 시작점과 한 도시 A에서 다른 도시 B로 가는 도로의 개수는 최대 1개이다.

모든 학생들은 집에서 X에 갈수 있고, X에서 집으로 돌아올 수 있는 데이터만 입력으로 주어진다.

출력
----
첫 번째 줄에 N명의 학생들 중 오고 가는데 가장 오래 걸리는 학생의 소요시간을 출력한다.

풀이
----
그래프에서 정점간의 [Shortest-path] 를 구하는 문제의 종류는 4가지가 있다.
 1. 정점-정점 (Single-pair)
 2. 정점-모든정점 (Single-source)
 3. 모든정점-정점 (Single-destination)
 4. 모든정점-모든정점 (All-pairs)

이 문제는 2, 3번에 해당하며 이는 [Dijkstra Algorithm] 으로 해결할 수 있다.

*Dijkstra Algorithm(다익스트라 알고리즘)
 : 첫 정점을 기준으로 연결되어있는 정점들을 추가해가며, 최단경로를 갱신하는 방식.
   정점을 연결하기 전 시작점을 제외한 모든 정점들은 INFINITY(무한대) 값을 갖는다.
ex) 정점A -> 정점B에서 정점 B가 갖는 최단거리 : min(정점A 최단거리 + 정점A-정점B 간선가중치, 정점B 최단거리)

 - Priority Queue를 이용하여 구현할 수 있다. (STL 사용법 : https://kbj96.tistory.com/15)
 - 정점의 최단거리가 갱신되는 경우 PQ에 push한다.
 - Single-source의 경우, 그래프가 단방향이므로 역방향 그래프를 하나 더 생성하여 Single-destination방식을 적용하면 된다.

*memset()
 - memset()의 2번째 인자는 single byte이다.
 - memset()은 해당 메모리의 특정위치를 int로 채우는 것이 아니라 single bytes로 채운다.
 - int값을 unsigned char형으로 변환하여 채우기에 값이 달라질 수 있음.
 - char, unsigned char을 제외한 변수는 0이외의 값으로 초기화하면 안된다.
(https://beautyrain.tistory.com/7 참고)
 - std::fill()함수를 사용하자.