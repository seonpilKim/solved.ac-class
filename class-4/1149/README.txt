[1149] RGB거리 (https://www.acmicpc.net/problem/1149)

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
0.5 초		128 MB		54197	25845	19294		48.046%

문제
----
RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

1번 집의 색은 2번 집의 색과 같지 않아야 한다.
N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.

입력
----
첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

출력
----
첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.

풀이
----
처음엔 Greedy Algorithm으로 접근해보았지만, 최적해를 구할 수 없어서 Dynamic Programming으로 접근방식을 바꾸었다.

(반례)
3
1 2 3
3 2 1
4 5 2
Answer : 5 / Wrong : 6

2차원 배열(dp[N][3])을 선언하고 다음과 같이 사용하였다.
 - dp[N][0] = N번째 집에 Red를 칠한 경우 비용 + N-1번째 집까지의 최소비용
 - dp[N][1] = N번째 집에 Green를 칠한 경우 비용 + N-1번째 집까지의 최소비용
 - dp[N][2] = N번째 집에 Blue를 칠한 경우 비용 + N-1번째 집까지의 최소비용
 
p.s) Greedy Algorithm vs Dynamic Programming
1. 정해가 [Dynamic Programming]인데 [Greedy Algorithm]으로 시도하면 분명히 반례가 존재한다.
 - 안전하게의 문제가 아니라 [Greedy Algorithm]이 틀렸기 때문이다.

2. 정해가 [Greedy Algorithm]인데 [Dynamic Programming]으로 접근하는 건 시간 복잡도나 공간 복잡도 상으로 문제가 생길 수 있다.